<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Edit me!</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TRY NOT TO CHANGE ANYTHING ON LINE 2 (Below)
came_from="";cantbehit=false;trans86E=false;dead=false;current_room=room;visibl=false;hit=false;right="Right";left="Left";nowhere="Nowhere";up="Up";down="Down";going=nowhere;continuesprite=-1;keysright=false;keysleft=false;freespace="Free space";liquid="Liquid";in=freespace;inwater=false;hitshock=false;going_to_prev_room=false;going_to_next_room=false;


//This variable (Below) is the direction you face at first.
facing=right;

//This variable (Below) is your current speed.
speedx=0;

//This variable (Below) decides the max amount of pixels you can possibly move (on ground) per step.
//WARNING: TRY NOT GIVE THIS VARIABLE A VALUE HIGHER THAN THE PLAYERS BOUNDING BOX WIDTH.
speedxmax=4;

//This variable (Below) decides how long you will take to return to a speed of 0 when not holding any keys.
slip=8;

//This variable (Below) decides how long you will take to reach your max speed when moving.
startup=11;

//This variable (Below) decides how strong the gravity is.
grav=0.6;

//This variable (Below) will tell you which way the player is trying to move. 
//If the value is 1, he's trying to move right, if it's 2, he's trying to move left.
move=0;

//Change these keys (Below) to change your in game controls
keyleft=vk_left;
keyright=vk_right;
keyup=vk_up;
keydown=vk_down;
gpadl=gamepad_button_check_pressed(0,gp_padl);
gpadr=gamepad_button_check_pressed(0,gp_padr);
gpadu=gamepad_button_check_pressed(0,gp_padu);
gpadd=gamepad_button_check_pressed(0,gp_padd);
gpadfa=gamepad_button_check_pressed(0,gp_face1);
gpadfb=gamepad_button_check_pressed(0,gp_face2);
gpadfx=gamepad_button_check_pressed(0,gp_face3);
gpadfy=gamepad_button_check_pressed(0,gp_face4);
gpadfa_r=gamepad_button_check_released(0,gp_face1);

//This variable (Below) will tell you whether you're on the ground or not.
onground=false;

//This variable (Below) is how fast you can possibly fall
vspeedmax=12;
//This variable (Below) is your jumping speed.
jumpspeed=11;
//This variable (Below) is the players initial score
playerscore=0;
//This is for doublejump
dbl_jump=false;

//flag for after hit
invins_max=90;
invins=0;


//                                                                       \\
//**** THESE VARIABLES (Below) ARE FOR WHEN YOU ENTER AND EXIT WATER ****\\

//This variable (Below) is how much your MAX SPEED will be temporarily divided by when you enter water.
    speeddivide=2;
//This variable (Below) is how much your VSPEED will be divided by when you enter water.
    vspeeddivide=2;
//This variable (Below) is how much your VSPEED will be multiplied by when you exit water.
    hopout=1.2;
//This variable (Below) is how much your GRAVITY will be temporarily divided by when you enter water.
    gravdivide=2; 
//This variable (Below) is how much your JUMP SPEED will be temporarily divided by when you enter water.
    jumpspeeddivide=1.7; 
//This variable (Below) is how much your MAX VSPEED will be temporarily divided by when you enter water.
    maxvspeeddivide=10;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Creating The Camera</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,CAMERA);
view_object=CAMERA;
instance_create(x,y,ScoreOperator);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>EXP and HP</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//                                                \\
//**** THESE VARIABLES (Below) ARE FOR HEALTH ****\\

//This variable (Below) is the highest your HP will ever get.
hpmax=100;

//This variable (Below) is your current health.
hp=hpmax;

//This variable (Below) is how many pixels wide your health will be at max.
hpscale=150;

//                                                    \\
//**** THESE VARIABLES (Below) ARE FOR EXPERIENCE ****\\

//This variable (Below) is the amount of exp you need to reach before a level up (for the first level up)\\
expmax=100;

//This variable (Below) is your current exp.
expcurrent=0;

//This variable (Below) is how many pixels wide your exp will be at max.
expscale=150;

level=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>When the player dies</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp==0&amp;&amp;dead=true)
{
//Type in what you want to happen when he dies.
persistent=true;
if (came_from=right)
    {x=obj_spawn_left.x; y=obj_spawn_left.y; hp=hpmax/2; dead=false;}
if (came_from=left)
    {x=obj_spawn_right.x; y=obj_spawn_right.y; hp=hpmax/2; dead=false;}
if (came_from="")
    {x=obj_first_spawn.x; y=obj_first_spawn.y; hp=hpmax/2; dead=false;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MAIN CODE</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The MAIN FUCKING code
if (hp&lt;=0 )
{
    dead=true;
}


//Gravity and limiting the vspeed\\
if (place_free(x,y+1)) 
{
    gravity=grav;
}
//else if ( place_meeting(x, y+1, obj_floor5)/* || place_meeting(x, y, obj_floor5)*/ )
//{
//    gravity = 0;
//}
else 
{
    gravity=0;
    dbl_jump=false;
}
if (vspeed&gt;vspeedmax) 
{
    vspeed=vspeedmax;
}



//Important keyboard checks to keep the movements smooth.\\
//if ((keyboard_check_direct(keyright) or gamepad_button_check(0,gp_padr))&amp;&amp;keysright==false) {move=1; keysright=true;}
//if ((keyboard_check_direct(keyleft ) or gamepad_button_check(0,gp_padl))&amp;&amp;keysleft==false)  {move=2; keysleft=true;}
//if ((keyboard_check_direct(keyright) or gamepad_button_check(0,gp_padr))&amp;&amp;!keyboard_check_direct(keyleft ) or !gamepad_button_check(0,gp_padl)) {move=1;}
//if ((keyboard_check_direct(keyleft) or gamepad_button_check(0,gp_padl))&amp;&amp;!keyboard_check_direct(keyright) or !gamepad_button_check(0,gp_padr)) {move=2;}
//if ((!keyboard_check_direct(keyright) or !gamepad_button_check(0,gp_padr))&amp;&amp;keysright==true) {move=0; keysright=false;}
//if ((!keyboard_check_direct(keyleft ) or !gamepad_button_check(0,gp_padl))&amp;&amp;keysleft==true)  {move=0; keysleft=false;}

//Important controller Checks to keep movements smooth.\\
//if (gpadr&amp;&amp;keysright==false) {move=1; keysright=true;}
//if (gpadl&amp;&amp;keysleft==false)  {move=2; keysleft=true}
//if (gpadr&amp;&amp;!gpadl) {move=1;}
//if (gpadl&amp;&amp;!gpadr) {move=2;}
//if (!gpadr&amp;&amp;keysright==true) {move=0; keysright=false;}
//if (!gpadl&amp;&amp;keysleft==true) {move=0; keysleft=false;}


//Normal right
if (gamepad_button_check_pressed(0,gp_padr)&amp;&amp;keysright==false)
{
    move=1;
    keysright = true;
}
//Normal left
if (gamepad_button_check_pressed(0,gp_padl)&amp;&amp;keysleft==false)
{
    move=2;
    keysleft = true;
}

//Are we done moving?
if (gamepad_button_check_released(0,gp_padr)&amp;&amp;keysright==true)
{
   move=0;
   keysright=false;
}
if (gamepad_button_check_released(0,gp_padl)&amp;&amp;keysleft==true)
{
    move=0;
    keysleft = false;
}
//quitting crack mode

// Changing the speedx \\
if (!hit)
{
    if (move==1)            
    {
        speedx+=(speedxmax-speedx)/startup
    }
    else if (move==2)       
    {
        speedx+=(-speedxmax-speedx)/startup
    }
    if (trans86E=false)
    {
        if (move==0&amp;&amp;speedx!=0) 
        {
            speedx+=-(speedx/slip)
        }
    }
    if (speedx&gt;-0.3&amp;&amp;speedx&lt;0.3&amp;&amp;move=0) 
    {
        speedx=0;
    }
}

// Jumping\\
if (keyboard_check_pressed(keyup) or gamepad_button_check_pressed(0,gp_face1)) 
{
    if (!place_free(x,y+1)/* or place_meeting(x,y+1,obj_floor5))*/&amp;&amp;place_free(x,y-1))||(inwater) || (instance_exists(Double_jumper))
    {
        if (instance_exists(Double_jumper))
        {
            instance_deactivate_object(Double_jumper)
            vspeed=-jumpspeed;
        }
        else
        {
            instance_create(x,y,Double_jumper)
            vspeed=-jumpspeed;
        }
    }
        /*if (gamepad_button_check_pressed(0,gp_shoulderrb))
        {    
            vspeed=-jumpspeed;
            dbl_jump=true;
        }
        else
        {
            vspeed=-jumpspeed;
            dbl_jump=true;
        }
        
    }
    if (place_free(x,y+1)&amp;&amp;place_free(x,y-1)&amp;&amp;dbl_jump=true)
    {
        if (gamepad_button_check_pressed(0,gp_shoulderrb))
        {    
            dbl_jump=false;
            vspeed=-jumpspeed;
        }
        else
        {
            dbl_jump=false;
            vspeed=-jumpspeed; 
        }
    }*/

//        if (onGround) {
//  canDouble = true;
//  trueVsp = -40 * kj; // jump
//} else {
//  if (canDouble &amp;&amp; kj) {
//    canDouble = false;
//    trueVsp = -20; // double jump
    
    if (inwater) 
    {
        if (facing==right)  
        {
            sprite_index=bland_base; image_speed=1;
        }
        if (facing==left)   
        {
            sprite_index=bland_basel; image_speed=1;
        }
    }
}

if ((keyboard_check_released(keyup) or gamepad_button_check_released(0,gp_face1))&amp;&amp;going==up) 
{
    vspeed/=1.6;
}


//Shooting Beta
    if gamepad_button_check_pressed(0,gp_face3)
    {
        if !instance_exists(BlandAmmo) or !instance_exists(BlandAmmol)
        {
            if (facing==right)
            {
                instance_create(x+7/*(16*image_xscale)*/,y-2,BlandAmmo);
            }
            else if (facing==left)
            {
                instance_create(x-7/*(16*image_xscale)*/,y+2,BlandAmmol);
            }
        }
        if (move&gt;=0)
        {
            if (facing==right)
            {
                instance_create(x+7/*(16*image_xscale)*/,y-2,BlandAmmo);
            }
            else if (facing==left)
            {
                instance_create(x-7/*(16*image_xscale)*/,y-2,BlandAmmol);
            }
        }
        if place_free(x,y+1)
        {
            if (facing==right)
            {
                instance_create(x+7/*(16*image_xscale)*/,y-2,BlandAmmo);
            }
            else if (facing==left)
            {
                instance_create(x-7/*(16*image_xscale)*/,y+2,BlandAmmol);
            }
        }
    }


// Updating direction variables \\
if (speedx&gt;0&amp;&amp;continuesprite=-1&amp;&amp;!hitshock) {facing=right;}
if (speedx&lt;0&amp;&amp;continuesprite=-1&amp;&amp;!hitshock) {facing=left;}
if (!place_free(x,y+1)) {onground=true;}
else {onground=false;}
if (vspeed&gt;0) {going=down;}
else if (vspeed&lt;0) {going=up;}
else {going=nowhere;}

//When you initially collide with the water
if (place_meeting(x,y,water)&amp;&amp;inwater==false) 
{   
    in=liquid; inwater=true; 
    speedxmax/=speeddivide; 
    vspeed/=vspeeddivide; 
    grav/=gravdivide; 
    jumpspeed/=jumpspeeddivide; 
    vspeedmax/=maxvspeeddivide;
    instance_create(x+speedx,y,obj_splash);
}
//When exit the water
else if (!place_meeting(x,y,water)&amp;&amp;inwater==true) 
{
    in=freespace; inwater=false; 
    speedxmax*=speeddivide; 
    vspeed*=hopout; 
    grav*=gravdivide 
    jumpspeed*=jumpspeeddivide; 
    vspeedmax*=maxvspeeddivide;
}

//*******************************************************************\\
//***********************SPRITE CHANGING BELOW***********************\\
//*******************************************************************\\


// Sprite changes for when you're NOT in the air and NOT moving \\
if (speedx==0&amp;&amp;onground&amp;&amp;move=0&amp;&amp;!hitshock) 
{
if (facing==right) {sprite_index=bland_base; image_speed=1;}
else if (facing==left) {sprite_index=bland_basel; image_speed=1;}
}



// Sprite changes for when you're NOT in the air and moving \\
if (speedx!=0&amp;&amp;onground&amp;&amp;!hitshock) 
{
if (facing==right)     {sprite_index=bland_sprint; ; image_speed=0.3;}
else if (facing==left) {sprite_index=bland_sprintl; image_speed=0.3;}
//if (facing==right&amp;&amp;move==2&amp;&amp;continuesprite==-1&amp;&amp;abs(speedx)&gt;speedxmax/1.8) 
//{sprite_index=spr_right_toleft; image_speed=0.5; facing=left ; continuesprite=sprite_index; image_index=0;}
//else if (facing==left&amp;&amp;move==1&amp;&amp;continuesprite==-1&amp;&amp;abs(speedx)&gt;speedxmax/1.8)  
//{sprite_index=spr_left_toright; image_speed=0.5; facing=right; continuesprite=sprite_index; image_index=0;}
}

// Sprite changes for when you're in the air \\
if (!onground&amp;&amp;!inwater&amp;&amp;!hitshock) 
{
if      (facing==right&amp;&amp;going==up)   {sprite_index=bland_goingup; image_speed=0;}
else if (facing==right&amp;&amp;going==down) {sprite_index=bland_falling; image_speed=0;}
if      (facing==left&amp;&amp;going==up)    {sprite_index=bland_goingupl; image_speed=0;}
else if (facing==left&amp;&amp;going==down)  {sprite_index=bland_fallingl; image_speed=0;}
}

// Sprite changes for when you're in WATER and NOT on the ground
//if (!onground&amp;&amp;inwater&amp;&amp;!hitshock)
//{
//if (facing==left&amp;&amp;sprite_index==spr_right_swim)       {sprite_index=spr_left_swim; image_speed=0.5;}
//else if (facing==right&amp;&amp;sprite_index==spr_left_swim)  {sprite_index=spr_right_swim;  image_speed=0.5;}
//if (facing==right&amp;&amp;sprite_index!=spr_right_swim)      {sprite_index=spr_right_water; image_speed=0.5;}
//else if (facing==left&amp;&amp;sprite_index!=spr_left_swim)   {sprite_index=spr_left_water;  image_speed=0.5;}
//}

//*******************************************************************\\
//***********************SPRITE CHANGING ABOVE***********************\\
//*******************************************************************\\



//Quit the turning animation if some things don't fit\\
if (!onground) {continuesprite=-1;}
else if (facing==right&amp;&amp;move==2) {continuesprite=-1;}
else if (facing==left&amp;&amp;move==1) {continuesprite=-1;}
if (continuesprite&gt;-1) 
{sprite_index=continuesprite; image_speed=0.5; 
if (facing==left) {if speedx&lt;0 {speedx=0;}} 
if (facing==right) {if speedx&gt;0 {speedx=0;}}}

//STRIP DBL_JUMP   
if (!place_free(x,y+1) &amp;&amp; dbl_jump=true)
{
    dbl_jump=false;
}




// The actual movement \\
if (place_free(x+speedx,y)) {x+=speedx;}
else 
{
if (trans86E=false)
{
if (speedx&gt;0) {move_contact_solid(0  , speedx); speedx=0;}
if (speedx&lt;0) {move_contact_solid(180,-speedx); speedx=0;}
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Invincibility</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (going==down or going==nowhere) {cantbehit=false;}

hitshock=hit
if (hit&amp;&amp;invins=0) 
{
if (facing==right) {sprite_index=spr_right_knockback; image_index=0; image_speed=0.5;}
if (facing==left) {sprite_index=spr_left_knockback; image_index=0; image_speed=0.5;}
vspeed=-4;
invins=invins_max;
}
else if (!place_free(x,y+1)) {hit=false;}
else if (inwater&amp;&amp;vspeed&gt;0) {hit=false;}

//Blinking when invinsible
if (invins&gt;0&amp;&amp;visibl==true) {visibl=false;}
else if (invins&gt;0&amp;&amp;visibl==false) {visibl=true;}

if (invins&gt;0) {invins-=1;}
if (invins==0) {visibl=true;}

// Limiting the HP
if (hp&gt;hpmax) {hp=hpmax;}
if (hp&lt;0) {hp=0;}

if (!place_free(x,y+1)) {canbehit=false;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Leveling up</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (expcurrent&gt;=expmax)
{
for (i=0; i&gt;-1; i+=1)
{
if expcurrent&gt;=expmax 
{
    expcurrent-=expmax;
    level+=1;
    
    //This is the EXPmax increasing formula. Feel free to change it.
    expmax+=round((expmax/1+(level/32))/(3.5+expmax/1500))
    
    //Type in some code here, this is what will happen whenever you level up.
    //For example, I could type in: hpmax += 10;
    //What that would do is increase my max HP by 10 points everytime I level up..
    hpmax += 10;
    hp=hpmax;
    
    
}
if expcurrent&lt;expmax {i=-4;}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ROOM CHANGING</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (going_to_next_room&amp;&amp;current_room=room) 
{room_goto_next(); instance_create(view_xview,view_yview,room_transition);}
else if (going_to_next_room&amp;&amp;current_room!=room) 
{going_to_next_room=false; x=obj_spawn_right.x; trans86E=false; while (!place_free(x,y)) {y-=1;}}

if (going_to_prev_room&amp;&amp;current_room=room) 
{room_goto_previous(); instance_create(view_xview,view_yview,room_transition);}
else if (going_to_prev_room&amp;&amp;current_room!=room) 
{going_to_prev_room=false; x=obj_spawn_left.x; trans86E=false;}

current_room=room;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if gamepad_button_check_pressed(0,gp_shoulderrb)
{
    speedxmax=8;
    startup=8;
    slip=11;
    jumpspeed=13;
}
if gamepad_button_check_released(0,gp_shoulderrb)// || !gamepad_button_check_pressed(0,gp_shoulderrb))
{
    speedxmax=4;
    startup=11;
    slip=8;
    jumpspeed=11;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oGame">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!going_to_prev_room)
{
if object_exists(Double_jumper)
{
    instance_deactivate_object(Double_jumper)
}
going_to_next_room=true;
trans86E=true;
came_from=left;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is all just for proper sprite changing.
//if (sprite_index==continuesprite) {continuesprite=-1; image_index=image_number-1; speedx=0;}
//if (sprite_index==spr_right_swim)      {sprite_index=spr_right_water; image_index=0; }
//else if (sprite_index==spr_left_swim)  {sprite_index=spr_left_water; image_index=0; }

//if (sprite_index==spr_right_knockback)||(sprite_index==spr_left_knockback) {image_index=image_number-1; image_speed=0;} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (visibl==true) {draw_sprite(sprite_index,floor(image_index),x,y);}

//Drawing the health
//draw_sprite(spr_HUD,0,view_xview,view_yview);

//keeping
//draw_sprite(spr_hp_bar,0,view_xview+3,view_yview+3);

//draw_sprite(spr_exp_bar,0,view_xview+3,view_yview+39);

//keeping
//draw_sprite_stretched(spr_hp_fill,0,view_xview+54,view_yview+12,hp/hpmax*hpscale,14);


//draw_sprite_stretched(spr_exp_fill,0,view_xview+54,view_yview+39+9,expcurrent/expmax*expscale,14);

//keeping
//draw_set_font(Health);
//draw_set_halign(true)
//draw_text((view_xview+54)+hpscale/2,view_yview+11,string(hp));


//draw_text((view_xview+54)+expscale/2,view_yview+39+8,string(expcurrent));
//draw_set_halign(false)
//draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
