<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-501</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invisible= "invisible";
hunting= "hunting";
dying= "dying"
fadeout="Fadeout";
fadein="Fadein";
waitinginvis= "waitinginvis";
waitingvis= "waitingvis";
right= "Right";
left= "Left"
facing=left;
state= hunting;
leftsight= 600;
rightsight= 600;
abovesight= 600;
belowsight= 600;
found_him=false;
//draw_sprite(spr_polto_idle1, 0, x, y);
sprite_index=spr_polto_idle;
//image_index=0;
//mage_speed=0.15;
spd=5;
hp=2;
strength=2;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(bland.x, bland.y-50, obj_polto_affect);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprites
if (state==hunting)
{
    if (facing==right)
    {
        sprite_index=spr_polto_idle;
        image_speed=0.15;
    }
    else if (facing==left)
    {
        sprite_index=spr_polto_idlel;
        image_speed=0.15;
    }
}

if (state==invisible)
{
    sprite_index=-1;
    image_speed=0;
}

if (state==fadeout)
{
    if (facing==right)
    {
        sprite_index=spr_polto_fade_out;
        image_speed=0.15;
    }
    else if (facing==left)
    {
        sprite_index=spr_polto_fade_outl;
        image_speed=0.15;
    }
}

if (state==fadein)
{
    if (facing==right)
    {
        sprite_index=spr_polto_fade_in;
        image_speed=0.15;
    }
    else if (facing==left)
    {
        sprite_index=spr_polto_fade_inl;
        image_speed=0.15;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///States

//Let's get one thing straight...
if (bland.x &lt;= x) 
{
    facing=left;
}
else
{
    facing=right;
}

//Visible and hunting
if (state==hunting)
{
    if (spd != 6)
    {
        spd=6;
    }
    
    if (mask_index != 0)
    {
        mask_index=0;
    }   
    
if (bland.x &lt;= x &amp;&amp; bland.facing==right) 
{
    state=fadeout;
}
else if (bland.x &gt;= x &amp;&amp; bland.facing==left)
{
    state=fadeout;
}
    /*
    if (facing==left &amp;&amp; bland.facing==right)
    {
        state=fadeout;
    }
    if (facing==right &amp;&amp; bland.facing==left)
    {
        state=fadeout;
    } 
    /*
    if (facing==right &amp;&amp; bland.facing==left)
    {
        state=fadeout;
    }
    /*
    if ( (bland.x &lt;= x &amp;&amp; bland.facing==right) 
    || (bland.x &gt;= x &amp;&amp; bland.facing==left) )
    {
        state=fadeout;
    }
    /*
    if (bland.x &gt;= x &amp;&amp; bland.facing==left)
    {
        state=fadeout;
    }
    */
    if (bland.x &lt;= x) 
    {
        facing=left
    }
    else
    {
        facing=right;
    }
    
    if (found_him==false)
    {
        if (collision_rectangle(x-leftsight,y-abovesight,x+rightsight,y+belowsight,bland,false,true))
        //&amp;&amp;!collision_line(bland.x,bland.y,x,y,obj_floor,true,true)
        {
            found_him=true;
        }
    }
    
    if (found_him==true)
    {
            var dir = point_direction(x, y, bland.x, bland.y-65);
            x += lengthdir_x(spd, dir);
            y += lengthdir_y(spd, dir);
    }
}

if (state==invisible)
{
    if (spd != 0)
    {
        spd=0;
    }
    
    if (mask_index != -1)
    {
        mask_index=-1;
    } 
    if (bland.x &lt;= x &amp;&amp; bland.facing==left) 
    {
        state=fadein;
    }
    else if (bland.x &gt;= x &amp;&amp; bland.facing==right)
    {
        state=fadein;
    }  
    /*
    if (facing==right &amp;&amp; bland.facing==right) 
    {
        state=fadein;
    }
    if (facing==left &amp;&amp; bland.facing==left)
    {
        state=fadein;
    }
    /*
    if (bland.x &lt;= x &amp;&amp; bland.facing==left)
    {
        state=fadein;
    }
    
    if (bland.x &gt;= x &amp;&amp; bland.facing==right)
    {
        state=fadein;
    }
    */
}

if (state==dying)
{
    if (spd != 0)
    {
        spd=0;
    }

}

if (state==fadein || state==fadeout)
{
    if (spd != 0)
    {
        spd=0;
    }
    
    if (mask_index != -1)
    {
        mask_index=-1;
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="bland">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index==spr_polto_fade_out || sprite_index==spr_polto_fade_outl)
{
    state=invisible;
}

if (sprite_index==spr_polto_fade_in || sprite_index==spr_polto_fade_inl)
{
    state=hunting;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite(sprite_index,floor(image_index),x,y);
//draw_sprite(spr_polto_idle1, 0, x, y);
if (sprite_index != -1)
{
    draw_self();
}
draw_set_font(sFont);
draw_set_halign(true);
draw_text(x,y-30,"State: "+string(state));
//draw_text(x-10, y-84,"facing: "+string(facing));
draw_set_halign(false);
draw_set_color(c_purple);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
