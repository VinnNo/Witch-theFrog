<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The Spawn
//Standard Sight
Left_Sight=   600;
Right_Sight=  600;
Above_Sight=  360;
Below_Sight=  360;

//Attack Sight
Target_Left=   80;
Target_Right=  80;
Target_Above=  80;
Target_Below=  80;

//Using this to set up some personal space because god damn.
Space_Left=     25;
Space_Right=    25;
Space_Above=    25;
Space_Below=    25;
//This variable (Below) is how much damage the enemy will do to the player.
strength=2;

//THESE ARE THE ENEMEIES SPRITES. CHANGE THIS IF YOU'VE MADE DIFFERENT SPRITES FOR THIS ENEMY
right_walk=spr_gurgoyle_fly;
right_die=spr_gurgoyle_die;
left_walk=spr_gurgoyle_flyl;
left_die=spr_gurgoyle_diel;

//This variable (Below) is how long it will take the enemy to give up on chasing the player when the player is out of his sight.
forget_him_time=45;

//TRY NOT TO CHANGE ANYTHING ON THE LINE BELOW
forget_him=0;
jump=false;
found_him=false;
right="Right";
left="Left";
nowhere="Nowhere";
up="Up";
down="Down";
going=nowhere;
continuesprite=-1;
freespace="Free space";
liquid="Liquid";
in=freespace;
inwater=false;
speedxmax_plus=0;

//This variable (Below) is the direction the enemy faces at first.
facing=left;

//This variable (Below) is the enemys current speed.
speedx=0;

//This variable (Below) decides the max amount of pixels the enemy can possibly move (on ground) per step.
//WARNING: TRY NOT GIVE THIS VARIABLE A VALUE HIGHER THAN THE ENEMIES BOUNDING BOX WIDTH.
speedxmax=2;

//This variable (Below) decides how long it will take for the enemy to return to a speed of 0.
slip=8;

//This variable (Below) decides how long the enemy will take to reach his max speed when moving.
startup=11;

//                                                \\
//**** THESE VARIABLES (Below) ARE FOR HEALTH ****\\

//This variable (Below) is the highest your HP will ever get.
hpmax=5;

//This variable (Below) is your current health.
hp=hpmax;

spd=2;
is_attacking=false;
hit=false;
can_be_hit=true;
attack_cooldown_max=45;
attack_cooldown=0;
alarm[0]=10;
dead=false;


//Some waiting stuff.
wait_delay=0;
wait_delay_max=120;
is_active=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Increasing Player EXP</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bland.expcurrent+=42;
/*
if (facing==left)
instance_create(x-15,y-60,obj_gem);
else if (facing==right)
instance_create(x-30,y-60,obj_gem);
*/
if (facing==left)
instance_create(x-15,y-60,obj_death_explosion);
else if (facing==right)
instance_create(x-30,y-60,obj_death_explosion);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//x-=spd;
//alarm[0]=120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//x+=spd;
//alarm[1]=120;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SYSTEM</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_gurgoyle_sprites();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System OLD
/*
if (hp&gt;0 &amp;&amp; hit==false &amp;&amp; dead==false)
{
    if ( found_him==true )
    {
        is_active=false;
        if ( instance_exists(bland) ) 
        {
            var dir = point_direction(x, y, bland.x, bland.y);
            x += lengthdir_x(spd, dir);
            y += lengthdir_y(spd, dir);
            //image_angle=dir;
            
            if (bland.x &lt;= x) 
            {
                facing=left
            }
            else
            {
                facing=right;
            }
            
            
            //I tried stuff here...
            /*
            if ( image_angle != 0 )
            {
                //Bland is left and up or right and down
                if ( (bland.x &lt;= x &amp;&amp; bland.y &gt;=y)
                || (bland.x &gt;= x &amp;&amp; bland.y &gt;= y) )
                {
                    if (image_angle != 329)
                    {
                        if (image_angle &gt; 330 &amp;&amp; image_angle &lt; 360)
                        {
                            image_angle-=1;
                        }
                    }
                }
                // otherwise he is left and down or right and up
                else if ( (bland.x &lt;= x &amp;&amp; bland.y &gt;=y)
                || (bland.x &gt;= x &amp;&amp; bland.y &lt;= y) )
                {
                    if (image_angle != 29)
                    {
                        if (image_angle &gt; 0 &amp;&amp; image_angle &lt; 30)
                        {
                            image_angle+=1;
                        }
                    }
                }
            }
            else if (image_angle==0)
            {
                //moving left and up or right and down
                if ( (bland.x &lt;= x &amp;&amp; bland.y &gt;=y)
                || (bland.x &gt;= x &amp;&amp; bland.y &gt;= y) )
                {
                    image_angle=359;
                }
                //otherwise left and down or right and up
                else if ( (bland.x &lt;= x &amp;&amp; bland.y &gt;=y)
                || (bland.x &gt;= x &amp;&amp; bland.y &lt;= y) )
                {
                    image_angle=1;
                }
            }

            

            
            //left and down
            if (bland.x &lt;= x &amp;&amp; bland.y &gt;= y)
            {
                image_angle=30;
            }
            //left and up
            else if (bland.x &lt;= x &amp;&amp; bland.y &lt;=y)
            {
                image_angle=329;
            }
            
            //right and up
            else if (bland.x &gt;= x &amp;&amp; bland.y &lt;= y)
            {
                image_angle=30;
            }
            //right and down
            else if (bland.x &gt;= x &amp;&amp; bland.y &gt;= y)
            {
                image_angle=329;
            }
            
        }
        
        if (collision_rectangle(x-Target_Left,y-Target_Above,x+Target_Right,y+Target_Below,bland,false,true)
        &amp;&amp;!collision_line(bland.x,bland.y,x,y,obj_floor,true,true))
        {
            is_attacking=true;
            can_be_hit=false;
            spd=5;
        }
    }
    else if ( found_him==false )
    {
        if (is_active==false)
        {
            if ( instance_exists(obj_gurg_rail1) )
            {
                var dir = point_direction(x, y, obj_gurg_rail1.x, obj_gurg_rail1.y);
                x += lengthdir_x(spd, dir);
                y += lengthdir_y(spd, dir);
                image_angle=0;
            }
        }
        
        if (obj_gurg_rail1.x &lt;= x) 
        {
            facing=left;
        }
        else
        {
            facing=right;
        }
    }
    
    if (collision_rectangle(x-Left_Sight,y-Above_Sight,x+Right_Sight,y+Below_Sight,bland,false,true)
    &amp;&amp;!collision_line(bland.x,bland.y,x,y,obj_floor,true,true))
    {
        found_him=true;
        forget_him=forget_him_time;
    }
    else
    {
        if forget_him&gt;0 
        {
          forget_him-=1;
        }
        if forget_him=0 
        {
            found_him=false
        }
    }
    
    if (is_attacking==true)
    {
        
        spd=5;
    }
    else
    {
        spd=2;
    }
/*
    if (bland.x &lt;= x) 
    {
        facing=left;
    }
    else
    {
        facing=right;
    }

}
else
{
    dead=true;
}
// Limiting the HP
if hp&gt;hpmax 
{
    hp=hpmax;
}

if hp&lt;0 
{
    hp=0;
}

/*
if (hp==0)
{
    if (facing==right&amp;&amp;sprite_index!=spr_gurgoyle_die) 
    {
        sprite_index=spr_gurgoyle_die;
        image_index=0;
    }

    if (facing==left&amp;&amp;sprite_index!=spr_gurgoyle_diel)  
    {
        sprite_index=spr_gurgoyle_diel;
        image_index=0;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
/*
if (hp&gt;0 &amp;&amp; hit==false &amp;&amp; dead==false)
{
    if ( found_him==true )
    {
        is_active=false;
        if ( instance_exists(bland) ) 
        {
            if (!collision_rectangle(x-Space_Left,y-Space_Above,x+Space_Right,y+Space_Below,bland,false,true))
            {
                var dir = point_direction(x, y, bland.x, bland.y);
                x += lengthdir_x(spd, dir);
                y += lengthdir_y(spd, dir);
            }
            
            if (bland.x &lt;= x) 
            {
                facing=left
            }
            else
            {
                facing=right;
            }
        
            if (collision_rectangle(x-Target_Left,y-Target_Above,x+Target_Right,y+Target_Below,bland,false,true)
            &amp;&amp; (!collision_rectangle(x-Space_Left,y-Space_Above,x+Space_Right,y+Space_Below,bland,false,true))
            &amp;&amp;!collision_line(bland.x,bland.y,x,y,obj_floor,true,true))
            {
                is_attacking=true;
                can_be_hit=false;
                spd=5;
            }
        }        
    }
    
    
    else if ( found_him==false )
    {
        if (is_active==false)
        {
            if ( instance_exists(obj_gurg_rail1) )
            {
                var dir = point_direction(x, y, obj_gurg_rail1.x, obj_gurg_rail1.y);
                x += lengthdir_x(spd, dir);
                y += lengthdir_y(spd, dir);
                image_angle=0;
            }
        }
        
        if (obj_gurg_rail1.x &lt;= x) 
        {
            facing=left;
        }
        else
        {
            facing=right;
        }
    }
    
    if (collision_rectangle(x-Left_Sight,y-Above_Sight,x+Right_Sight,y+Below_Sight,bland,false,true)
    &amp;&amp;!collision_line(bland.x,bland.y,x,y,obj_floor,true,true))
    {
        found_him=true;
        forget_him=forget_him_time;
    }
    else
    {
        if forget_him&gt;0 
        {
          forget_him-=1;
        }
        if forget_him=0 
        {
            found_him=false
        }
    }
    
    if (is_attacking==true)
    {
        
        spd=5;
    }
    else
    {
        spd=2;
    }
}

// Limiting the HP
if (hp&gt;hpmax) 
{
    hp=hpmax;
}

if (hp&lt;0) 
{
    hp=0;
}


if (hp==0)
{
    if (facing==right&amp;&amp;sprite_index!=spr_gurgoyle_die) 
    {
        scr_gurgoyle_sprites();
        //sprite_index=spr_gurgoyle_die;
        //image_speed=0.4;
    }

    if (facing==left&amp;&amp;sprite_index!=spr_gurgoyle_diel)  
    {
        scr_gurgoyle_sprites();
        //sprite_index=spr_gurgoyle_diel;
        //image_speed=0.4;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_gurgoyle_sprites();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_gurgoyle_sprites();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (is_active==false)
{
    is_active=true;
    alarm[0]=true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index==spr_gurgoyle_die) 
{
    instance_destroy();
}

if (sprite_index==spr_gurgoyle_diel) 
{
    instance_destroy();
}

if (sprite_index==spr_gurgoyle_attack)
{
    is_attacking=false;
    can_be_hit=true;
}

if (sprite_index==spr_gurgoyle_attackl)
{
    is_attacking=false;
    can_be_hit=true;
}

if (sprite_index=spr_gurgoyle_hit)
{
    hit=false;
    can_be_hit=true;
}

if (sprite_index=spr_gurgoyle_hitl)
{
    hit=false;
    can_be_hit=true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//draw_sprite(sprite_index,floor(image_index),x,y);
/*
draw_set_font(enemy_hp);
draw_set_halign(true);
draw_text(x,y-84,"Reapo: "+string(hp));
draw_set_halign(false);
draw_set_color(c_purple);
*/
draw_self();
/*
if (found_him==true)
{
    if ( instance_exists(bland) )
    {
        image_angle=point_direction(x, y, bland.x, bland.y);
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
